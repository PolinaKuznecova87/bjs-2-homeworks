//Задание 1

//Напишите функцию parseCount .
//Аргументом функции является значение, которое необходимо распарсить.
// Для парсинга используйте функцию Number.parseFloat.
// Если результат парсинга — значение NaN, то выбрасывайте исключение с //ошибкой «Невалидное значение».
// Верните результат парсинга из функции.

"use strict";
function parseCount(item) {
  const value = parseFloat(item);
  if (isNaN(value)) {
    throw new Error("Невалидное значение");
  }

  return value;
}
//Напишите функцию validateCount.
//Аргументом функции является значение, которое необходимо распарсить.
// Попробуйте распарсить значение с помощью функции parseCount.
// Если распарсить удаётся успешно, то возвращайте результат.
//Перехватывайте исключение, которое может выбрасывать функция parseCount.
//Возвращайте ошибку из функции в случае перехвата исключения.

function validateCount(item) {
  try {
    return parseCount(item);
  } catch (error) {
    return error;
  }
}

//Задание 2

//Напишите класс Triangle.
//Конструктор класса должен принимать три стороны треугольника.
//В случае нарушения правила существования треугольника (сумма двух сторон //меньше третьей) выбрасывайте исключение с ошибкой «Треугольник с такими //сторонами не существует».
//Геттер perimeter должен возвращать периметр треугольника.
//Геттер area должен возвращать площадь треугольника. Для подсчёта площади //используйте формулу Герона. Точность должна вычисляться с обозначением //до трёх знаков после запятой.
class Triangle {
  constructor(a, b, c) {
    if (a + b < c || a + c < b || b + c < a) {
      throw new Error("Треугольник с такими сторонами не существует");
    }
    this.a = a;
    this.b = b;
    this.c = c;
  }
  get perimeter() {
    return this.a + this.b + this.c;
  }
  get area() {
    const p = this.perimeter / 2;
    return +Math.sqrt(p * (p - this.a) * (p - this.b) * (p - this.c)).toFixed(
      3);

  }
}

//Напишите функцию getTriangle.
//Аргументами функции являются три значения длин сторон.
//Попытайтесь вернуть новый объект треугольника.
//В случае перехвата исключения возвращайте объект с двумя геттерами area /и perimeter, которые возвращают строку: «Ошибка! Треугольник не //существует».

function getTriangle(a, b, c) {
  try {
    return new Triangle(a, b, c);
  } catch (error) {
    return {
      get perimeter() {
        return "Ошибка! Треугольник не существует";
      },
      get area() {
        return "Ошибка! Треугольник не существует";
      }
    }
  }
}
